source(file.path(dossier_script, "fun_resumer_listes.R"))
source(file.path(dossier_script, "fun_get_data_hydrobio.R"))
# Suppression du fichier de données s'il existe
#unlink("../data_hydrobio.rda")
unlink("R:/ServicesRegionaux/Service_Connaissance/7-Laboratoire_hydrobiologie/Donnees/Syntheses_et_valorisation/Outil_valorisation_HB_HDF_2025/data_hydrobio1.rda")
# Date de mise à jour des données
date_donnees <- Sys.Date()
# Définition des départements à traiter
#departements <- c('02','59','60','62','80','08','51','52','55','95','77') # Déartements dans lesquels il y a des stations suivies
departements <- c('80') # Déartements dans lesquels il y a des stations suivies
departements_extra <- c("")  # Départements limitrophes avec stations en régie
## Creation d une liste code_stations qui contient le code station de toutes les stations dans la zone d'etude
# library(sf)
points_qgis <- st_read("R:/ServicesRegionaux/Service_Connaissance/7-Laboratoire_hydrobiologie/Donnees/Syntheses_et_valorisation/Outil_valorisation_HB_HDF_2025/AEAP_AESN/StationsTOUTES.shp")
code_stations <- unique(points_qgis$code_stati)
# Import des suivis en régie et de la typologie nationale
regie <- importer_suivis_regie(departements,code_stations)
# regie <- HydrobioIdF::importer_suivis_regie("dev/Historique prog labo.xlsx")
fichier <- file.path(dossier_script,"Reseau_DREAL_HdF_tableau_referent_v13.xls")
file.exists(fichier)
typo_nationale <- read_excel(fichier)|>
dplyr::rename(CdStationMesureEauxSurface=4,TypeCEStationMesureEauxSurface=5)|>
dplyr::slice(-1)|> dplyr::select(4,5)
# typo_nationale <- sf::st_read("dev/stations_reseaux_sn.gpkg", layer = "stations_reseaux_sn") |>
#   dplyr::select(CdStationMesureEauxSurface, TypeCEStationMesureEauxSurface) |>
#   sf::st_drop_geometry()
#' Script de préparation des données hydrobiologiques
#'
#' Ce script prépare les données hydrobiologiques pour l'application HydrobioIdF en :
#' 1. Téléchargeant les données des stations et des indices biologiques
#' 2. Calculant l'état biologique selon les méthodes 2015 et 2018
#' 3. Préparant les données pour l'affichage cartographique
#' 4. Résumant les listes faunistiques et floristiques
# Fonction pour installer et charger les packages requis
packages_necessaires <- c(
"dplyr", "lubridate", "purrr", "stringr", "sf",
"readxl", "openxlsx2", "janitor", "tidyr", "hubeau","vroom",
"pak", "this.path"
)
installer_et_charger_packages <- function(packages) {
installes <- rownames(installed.packages())
for (pkg in packages) {
if (!pkg %in% installes) {
install.packages(pkg, dependencies = TRUE)
}
library(pkg, character.only = TRUE)
}
}
# Appel de la fonction
installer_et_charger_packages(packages_necessaires)
# definir le working directory à l'endroit où on veut enregistrer le fichier
setwd(here())
# Installation des dépendances
if (!require(pak)) install.packages("pak")
pak::pkg_install(c("CedricMondy/SEEEapi"))
#On charge le path du fichier actuel pour l utiliser pour charger les scripts ci-dessous
chemin_script <- this.path::this.path()
dossier_script <- dirname(chemin_script)
source(file.path(dossier_script, "fun_resumer_listes.R"))
source(file.path(dossier_script, "fun_get_data_hydrobio.R"))
# Suppression du fichier de données s'il existe
#unlink("../data_hydrobio.rda")
unlink("R:/ServicesRegionaux/Service_Connaissance/7-Laboratoire_hydrobiologie/Donnees/Syntheses_et_valorisation/Outil_valorisation_HB_HDF_2025/data_hydrobio1.rda")
# Date de mise à jour des données
date_donnees <- Sys.Date()
# Définition des départements à traiter
#departements <- c('02','59','60','62','80','08','51','52','55','95','77') # Déartements dans lesquels il y a des stations suivies
departements <- c('80') # Déartements dans lesquels il y a des stations suivies
departements_extra <- c("")  # Départements limitrophes avec stations en régie
## Creation d une liste code_stations qui contient le code station de toutes les stations dans la zone d'etude
# library(sf)
points_qgis <- st_read("R:/ServicesRegionaux/Service_Connaissance/7-Laboratoire_hydrobiologie/Donnees/Syntheses_et_valorisation/Outil_valorisation_HB_HDF_2025/AEAP_AESN/StationsTOUTES.shp")
code_stations <- unique(points_qgis$code_stati)
# Import des suivis en régie et de la typologie nationale
regie <- importer_suivis_regie(departements,code_stations)
# regie <- HydrobioIdF::importer_suivis_regie("dev/Historique prog labo.xlsx")
fichier <- file.path(dossier_script,"Reseau_DREAL_HdF_tableau_referent_v13.xls")
file.exists(fichier)
typo_nationale <- read_excel(fichier)|>
dplyr::rename(CdStationMesureEauxSurface=4,TypeCEStationMesureEauxSurface=5)|>
dplyr::slice(-1)|> dplyr::select(4,5)
# typo_nationale <- sf::st_read("dev/stations_reseaux_sn.gpkg", layer = "stations_reseaux_sn") |>
#   dplyr::select(CdStationMesureEauxSurface, TypeCEStationMesureEauxSurface) |>
#   sf::st_drop_geometry()
# Téléchargement et filtrage des stations
# - Récupération des stations des départements d'IdF et limitrophes
# - Conservation uniquement des stations d'IdF et des stations en régie
# - Association avec la typologie nationale pour le calcul des états
stations <- telecharger_stations(
code_departement = c(departements, departements_extra),
suivi_regie = regie,
code_stations = code_stations
) |>
dplyr::filter(
(code_departement %in% departements) |  regie,
) |>
dplyr::left_join(
typo_nationale, by = c("code_station_hydrobio" = "CdStationMesureEauxSurface")
)
# Téléchargement des indices biologiques pour les stations sélectionnées
# Les indices concernés sont :
# - IPR (7036) : Indice Poissons Rivière
# - IBD (5856) : Indice Biologique Diatomées
# - IBMR (2928) : Indice Biologique Macrophytique en Rivière
# - I2M2 (7613) : Indice Invertébrés Multi-Métrique
# - IBG équivalent (5910) : Indice Biologique Global
# - Invertébrés GCE (6951) : Indice Groupe de Consommation Écologique
indices <- telecharger_indices(
code_departement = c(departements, departements_extra)
) |>
dplyr::filter(
code_station_hydrobio %in% stations$code_station_hydrobio
)
# Formatage des données pour le SEEE
# Le SEEE requiert un format spécifique pour les données d'entrée :
# - CODE_OPERATION : identifiant unique du prélèvement
# - CODE_STATION : code de la station
# - DATE : date du prélèvement au format JJ/MM/AAAA
# - CODE_PAR : code de l'indice
# - LIB_PAR : libellé de l'indice
# - RESULTAT : valeur de l'indice
indices_seee <- indices |>
dplyr::transmute(
CODE_OPERATION = code_prelevement,
CODE_STATION = code_station_hydrobio,
DATE = date_prelevement |>
format(format = "%d/%m/%Y"),
CODE_PAR = code_indice,
LIB_PAR = libelle_indice,
RESULTAT = resultat_indice
) |>
# Ajout d'une ligne fictive pour l'altitude des stations IPR
# Nécessaire pour le calcul de l'état biologique
# La valeur de 200m est utilisée par défaut car elle n'influence pas
# le calcul pour les cours d'eau d'Île-de-France
dplyr::bind_rows(
indices |>
dplyr::filter(code_indice == 7036) |>
dplyr::transmute(
CODE_OPERATION = code_prelevement,
CODE_STATION = code_station_hydrobio,
DATE = date_prelevement |>
format(format = "%d/%m/%Y")
) |>
dplyr::distinct() |>
dplyr::mutate(
CODE_PAR = "NA",
LIB_PAR = "ALT",
RESULTAT = 200
)
) |>
dplyr::mutate(
LIB_PAR = ifelse(CODE_PAR == 7036, "IPR", LIB_PAR)
)
# Formatage des stations pour le SEEE
# Le SEEE requiert les informations suivantes pour chaque station :
# - CODE_STATION : code de la station
# - TYPO_NATIONALE : type de cours d'eau
# - TG_BV : présence de très grands bassins versants (>10 000 km²)
# - PERIODE_DEBUT et PERIODE_FIN : années de début et fin pour le calcul
stations_seee <- stations |>
dplyr::transmute(
CODE_STATION = code_station_hydrobio,
TYPO_NATIONALE = TypeCEStationMesureEauxSurface,
# Détection des très grands cours d'eau (préfixe TG dans la typologie)
# Cette information est nécessaire pour le calcul de l'IBD
TG_BV = TypeCEStationMesureEauxSurface |>
stringr::str_detect(pattern = "TG") |>
stringr::str_replace_all(pattern = 'TRUE', replacement = "OUI") |>
stringr::str_replace_all(pattern = 'FALSE', replacement = "NON"),
PERIODE_DEBUT = lubridate::year(date_premier_prelevement),
PERIODE_FIN = lubridate::year(date_dernier_prelevement)
) |>
# Suppression des stations sans typologie (pas de calcul possible)
dplyr::filter(!is.na(TYPO_NATIONALE)) |>
# Création d'une ligne par année de données
dplyr::rowwise() |>
dplyr::mutate(ANNEE = list(seq(PERIODE_DEBUT, PERIODE_FIN))) |>
dplyr::ungroup() |>
tidyr::unnest(ANNEE) |>
dplyr::select(CODE_STATION, TYPO_NATIONALE, TG_BV, PERIODE_DEBUT = ANNEE, PERIODE_FIN = ANNEE)
shiny::runApp()
runApp()
runApp()
#' Script de préparation des données hydrobiologiques
#'
#' Ce script prépare les données hydrobiologiques pour l'application HydrobioIdF en :
#' 1. Téléchargeant les données des stations et des indices biologiques
#' 2. Calculant l'état biologique selon les méthodes 2015 et 2018
#' 3. Préparant les données pour l'affichage cartographique
#' 4. Résumant les listes faunistiques et floristiques
# # Fonction pour installer et charger les packages requis
# packages_necessaires <- c(
#   "dplyr", "lubridate", "purrr", "stringr", "sf",
#   "readxl", "openxlsx2", "janitor", "tidyr", "hubeau","vroom",
#   "pak", "this.path"
# )
#
# installer_et_charger_packages <- function(packages) {
#   installes <- rownames(installed.packages())
#   for (pkg in packages) {
#     if (!pkg %in% installes) {
#       install.packages(pkg, dependencies = TRUE)
#     }
#     library(pkg, character.only = TRUE)
#   }
# }
#
# # Appel de la fonction
# installer_et_charger_packages(packages_necessaires)
# Active l'environnement renv
if (file.exists("renv/activate.R")) {  source("renv/activate.R")
} else {  stop("Le fichier renv/activate.R est introuvable. L'application ne peut pas démarrer.")}
required_packages <- c(  "dplyr", "tidyr", "purrr", "stringr", "forcats", "lubridate",  "htmltools", "hubeau", "janitor", "knitr", "leaflet", "leaflet.extras",  "openxlsx2", "patchwork", "plotly", "sf", "shiny", "shinydashboard",  "pkgload", "here", "munsell", "readxl", "vroom")
installed_pkgs <- rownames(installed.packages())
for (pkg in required_packages) {
if (!pkg %in% installed_pkgs) {
message("Installation du package manquant : ", pkg)
renv::install(pkg)
}
}
invisible(lapply(required_packages, library, character.only = TRUE))
# definir le working directory à l'endroit où on veut enregistrer le fichier
# setwd(here())
# Installation des dépendances
if (!require(pak)) install.packages("pak")
pak::pkg_install(c("CedricMondy/SEEEapi"))
#On charge le path du fichier actuel pour l utiliser pour charger les scripts ci-dessous
chemin_script <- this.path::this.path()
dossier_script <- dirname(chemin_script)
setwd(dossier_script)
source(file.path(dossier_script, "fun_resumer_listes.R"))
source(file.path(dossier_script, "fun_get_data_hydrobio.R"))
# Date de mise à jour des données
date_donnees <- Sys.Date()
# Définition des départements à traiter
#departements <- c('02','59','60','62','80','08','51','52','55','95','77') # Déartements dans lesquels il y a des stations suivies
departements <- c('80') # Déartements dans lesquels il y a des stations suivies
departements_extra <- c("")  # Départements limitrophes avec stations en régie
## Creation d une liste code_stations qui contient le code station de toutes les stations dans la zone d'etude
# library(sf)
points_qgis <- st_read("R:/ServicesRegionaux/Service_Connaissance/7-Laboratoire_hydrobiologie/Donnees/Syntheses_et_valorisation/Outil_valorisation_HB_HDF_2025/AEAP_AESN/StationsTOUTES.shp")
code_stations <- unique(points_qgis$code_stati)
# Import des suivis en régie et de la typologie nationale
regie <- importer_suivis_regie(departements,code_stations)
# regie <- HydrobioIdF::importer_suivis_regie("dev/Historique prog labo.xlsx")
#fichier <- file.path(dossier_script,"Reseau_DREAL_HdF_tableau_referent_v13.xls")
# Liste des fichiers dans dossier_script contenant "HdF_tableau_referent"
fichiers <- list.files(path = dossier_script, pattern = "HdF_tableau_referent", full.names = TRUE)
print(fichiers)
# Prendre le premier fichier trouvé (ou gérer le cas où il n'y en aurait pas)
if (length(fichiers) == 0) {
stop("Aucun fichier trouvé avec 'HdF_tableau_referent' dans ", dossier_script)
} else {
fichier <- fichiers[1]
}
typo_nationale <- read_excel(fichier)|>
dplyr::rename(CdStationMesureEauxSurface=4,TypeCEStationMesureEauxSurface=5)|>
dplyr::slice(-1)|> dplyr::select(4,5)
# typo_nationale <- sf::st_read("dev/stations_reseaux_sn.gpkg", layer = "stations_reseaux_sn") |>
#   dplyr::select(CdStationMesureEauxSurface, TypeCEStationMesureEauxSurface) |>
#   sf::st_drop_geometry()
# Téléchargement et filtrage des stations
# - Récupération des stations des départements d'IdF et limitrophes
# - Conservation uniquement des stations d'IdF et des stations en régie
# - Association avec la typologie nationale pour le calcul des états
stations <- telecharger_stations(
code_departement = c(departements, departements_extra),
suivi_regie = regie,
code_stations = code_stations
) |>
dplyr::filter(
(code_departement %in% departements) |  regie,
) |>
dplyr::left_join(
typo_nationale, by = c("code_station_hydrobio" = "CdStationMesureEauxSurface")
)
shiny::runApp()
runApp()
runApp()
source("packages.R")
load("R:/ServicesRegionaux/Service_Connaissance/7-Laboratoire_hydrobiologie/Donnees/Syntheses_et_valorisation/Outil_valorisation_HB_HDF_2025/data_carte.rda", envir = .GlobalEnv)
load("R:/ServicesRegionaux/Service_Connaissance/7-Laboratoire_hydrobiologie/Donnees/Syntheses_et_valorisation/Outil_valorisation_HB_HDF_2025/data_hydrobio.rda", envir = .GlobalEnv)
# Charge tous les fichiers R dans app/R (les modules)
module_files <- list.files("R", pattern = "\\.R$", full.names = TRUE)
sapply(module_files, source)
addResourcePath("static", "www")
choix_departements <- list(
"Zones prédéfinies" = list(
"Hauts-de-France (tout)" = "HDF",  # ← valeur spéciale
"Grand Est (tout)" = "GE",  # ← valeur spéciale
"Île-de-France (tout)" = "IdF"  # ← valeur spéciale
),
"Hauts-de-France" = list(
"Aisne (02)" = "02",
"Nord (59)" = "59",
"Oise (60)" = "60",
"Pas-de-Calais (62)" = "62",
"Somme (80)" = "80"
),
"Grand Est" = list(
"Ardennes (08)" = "08",
"Marne (51)" = "51",
"Haute-Marne (52)" = "52",
"Meuse (55)" = "55"
),
"Île-de-France" = list(
"Seine-et-Marne (77)" = "77",
"Val-d'Oise (95)" = "95"
)
)
ui <- fluidPage(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "static/style.css"),
tags$link(rel = "icon", type = "image/png", href = "static/favicon.png")
),
div(
style ="display: flex; justify-content: space-between;align-items: center;position: relative;z-index: 10;",
h1(
class = "TitreAppli",
"Suivis hydrobiologiques en Hauts-de-France"
),
mod_export_print_ui("export_print")
),
div(
div("Date d'accès aux données:"),
mod_load_data_ui("donnees"),
style = "position: absolute; bottom: 0, width: 10%;"
),
img(
src = "static/logo.png",
alt = 'logo',
style = '
position:fixed;
bottom:0;
right:0;
padding:10px;
width:200px;
'
),
img(
src = "static/filigrane.png",
alt = "filigrane",
style = '
position:fixed;
bottom:0;
right:0;
padding:0px;
width:800px;
z-index : -1;
color:rgb(153, 215, 247);
'
##99D7F7;
),
sidebarLayout(
sidebarPanel = sidebarPanel(
width = 2,
h2("Panneau de sélection"),
div(
style = "margin-bottom: 20px;",
mod_selecteur_ui(
id = "departements",
titre = "Zone géographique",
texte = "Tous",
choix = choix_departements,
choix_multiple = TRUE
)
),
div(
style = "margin-bottom: 20px;",
mod_selecteur_ui(
id = "eqb",
titre = "Eléments de qualité biologique",
texte = "Tous",
choix = c(
"Diatomées" = 10,
"Macrophytes" = 27,
"Macroinvertébrés" = 13,
"Poissons" = 4
),
choix_multiple = TRUE
)
#div(class = "page-break")
),
div(class = "no-print",
style = "display : none; margin-bottom: 20px;",
mod_regie_ui(
id = "regie",
titre = "Stations suivies au moins une fois en régie"
)
),
div (class = "no-print",
style = "margin-bottom: 20px;",
mod_selecteur_ordre_taxons_ui(id = "ordre_taxons")
)
),
mainPanel = mainPanel(
width = 10,
tabsetPanel(
tabPanel(
title = "Communautés",
fluidRow(
column(
width = 7,
mod_carte_ui(
id = "carte",
hauteur = "500px"
),
div(class = "page-break"),
mod_synthese_toutes_stations_ui(
id = "bilan_stations"
)
),
column(
width = 5,
mod_synthese_station_ui(id = "synthese_station")
)
)
),
tabPanel(
title = "Taxons",
fluidRow(
column(
width = 7,
mod_repartition_taxons_ui(id = "carte_taxons",
hauteur = "500px")
),
div(class = "page-break"),
column(
width = 5,
mod_synthese_taxon_ui(id = "synthese_taxon")
)
)
),
tabPanel(
title = p(class = "TabMethode", "Données & Traitements"),
fluidRow(
column(
width = 12,
mod_donnees_traitements_ui(id = "texte_methode")
)
)
)
)
)
)
)
server <- function(input, output, session) {
# Your application server logic
# Télécharge et charge dans l'espace de travail les données: "donnees_carte",
# "donnees_carte_taxons", "indices", "listes_taxo", "resumes_listes",
# "stations", "acronymes_indices", "date_donnees"
mod_load_data_server("donnees")
#load_data_hydrobio()
choix_departements <- mod_selecteur_server(id = "departements")
choix_eqbs <- mod_selecteur_server(id = "eqb")
choix_stations <- mod_regie_server(id = "regie", choix_eqb = choix_eqbs, choix_dep = choix_departements)
station <- mod_carte_server(
"carte",
donnees_carte = donnees_carte,
choix_stations = choix_stations
)
ordre_taxon <- mod_selecteur_ordre_taxons_server(
id = "ordre_taxons",
choix_station = station,
choix_eqb = choix_eqbs
)
mod_synthese_toutes_stations_server(
id = "bilan_stations",
stations = stations,
indices = etat_bio,
choix_stations = choix_stations,
choix_eqb = choix_eqbs
)
mod_synthese_station_server(
id = "synthese_station",
resumes_listes = resumes_listes,
stations = stations,
regie = regie,
indices = indices,
acronymes_indices = acronymes_indices,
valeurs_seuils_stations = valeurs_seuils_stations,
parametres_eqr = parametres_eqr,
etat_bio = etat_bio,
listes_taxo = listes_taxo,
choix_station = station,
choix_eqb = choix_eqbs,
ordre_taxon = ordre_taxon,
choix_stations = choix_stations
)
repartition <- mod_repartition_taxons_server(
id = "carte_taxons",
listes = donnees_carte_taxons,
choix_stations = choix_stations,
choix_eqbs = choix_eqbs
)
mod_synthese_taxon_server(
id = "synthese_taxon",
repartition = repartition,
choix_stations = choix_stations
)
mod_export_print_server("export_print")
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
source("packages.R")
load("R:/ServicesRegionaux/Service_Connaissance/7-Laboratoire_hydrobiologie/Donnees/Syntheses_et_valorisation/Outil_valorisation_HB_HDF_2025/data_carte.rda", envir = .GlobalEnv)
runApp()
shiny::runApp()
